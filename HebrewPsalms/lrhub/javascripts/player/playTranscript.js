// Generated by CoffeeScript 1.10.0
(function() {
  var Transcript, addClass, findAllElementsHavingPrefix, removeClass, startsWith,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  startsWith = function(str, prefix) {
    return str.slice(0, prefix.length) === prefix;
  };

  addClass = function(element, classname) {
    return element.className += ' ' + classname;
  };

  removeClass = function(element, classname) {
    return element.className = element.className.replace(new RegExp('\\b' + classname + '\\b', 'g'), '').replace(/\s+/g, ' ');
  };

  findAllElementsHavingPrefix = function(tagName, prefix) {
    var element, j, len, matches, ref;
    matches = [];
    ref = document.getElementsByTagName(tagName);
    for (j = 0, len = ref.length; j < len; j++) {
      element = ref[j];
      if (startsWith(element.id, prefix)) {
        matches.push(element);
      }
    }
    return matches;
  };

  window.Transcript = Transcript = (function() {
    Transcript.prototype.spansAndTimes = [];

    Transcript.prototype.highlightedIndex = void 0;

    Transcript.prototype.highlightedMillis = void 0;

    Transcript.prototype.timeMonitor = void 0;

    function Transcript(soundObj, spanPrefix, mouseoverClass, highlightClass) {
      var index, j, k, len, len1, ref, ref1, span, spansWithPrefix, time;
      this.soundObj = soundObj;
      this.highlightClass = highlightClass;
      this.highlightSpan = bind(this.highlightSpan, this);
      this.processNewTime = bind(this.processNewTime, this);
      spansWithPrefix = findAllElementsHavingPrefix('span', spanPrefix);
      for (j = 0, len = spansWithPrefix.length; j < len; j++) {
        span = spansWithPrefix[j];
        time = span.id.slice(spanPrefix.length);
        this.spansAndTimes.push({
          span: span,
          time: time
        });
      }
      ref = this.spansAndTimes;
      for (index = k = 0, len1 = ref.length; k < len1; index = ++k) {
        ref1 = ref[index], span = ref1.span, time = ref1.time;
        span.onmouseover = function() {
          return addClass(this, mouseoverClass);
        };
        span.onmouseout = function() {
          return removeClass(this, mouseoverClass);
        };
        span.onclick = (function(_this) {
          return function(time, index) {
            return function() {
              _this.highlightSpan(index);
              _this.soundObj.play();
              return _this.soundObj.setPosition(time);
            };
          };
        })(this)(time, index);
      }
      this.timeMonitor = setInterval(((function(_this) {
        return function() {
          return _this.processNewTime(_this.soundObj.getPosition());
        };
      })(this)), 75);
    }

    Transcript.prototype.processNewTime = function(millis) {
      var findSpanIDToHighlight, index, millisUntil, nextTime;
      findSpanIDToHighlight = (function(_this) {
        return function(millis) {
          var count, i, isLast, j, nextSpan, ref, span;
          count = _this.spansAndTimes.length;
          for (i = j = 0, ref = count - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            span = _this.spansAndTimes[i];
            if (millis >= span.time) {
              isLast = (i + 1) === count;
              if (isLast) {
                return i;
              }
              nextSpan = _this.spansAndTimes[i + 1];
              if (millis < nextSpan.time) {
                return i;
              }
            }
          }
        };
      })(this);
      if (millis !== this.highlightedMillis) {
        this.highlightedMillis = millis;
        index = findSpanIDToHighlight(millis);
        if ((index + 1) === this.highlightedIndex) {
          nextTime = this.spansAndTimes[this.highlightedIndex].time;
          millisUntil = nextTime - millis;
          if (millisUntil < 150) {
            return;
          }
        }
        return this.highlightSpan(index);
      }
    };

    Transcript.prototype.highlightSpan = function(index) {
      var span;
      if (this.highlightedIndex !== index) {
        if (this.highlightedIndex != null) {
          removeClass(this.spansAndTimes[this.highlightedIndex].span, this.highlightClass);
        }
        span = this.spansAndTimes[index].span;
        addClass(span, this.highlightClass);
        $(span).scrollintoview();
        return this.highlightedIndex = index;
      }
    };

    return Transcript;

  })();

}).call(this);
